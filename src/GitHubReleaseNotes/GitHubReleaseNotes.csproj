<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<AssemblyName>GitHubReleaseNotes</AssemblyName>
		<RootNamespace>GitHubReleaseNotes</RootNamespace>
		<PackageIcon>icon.png</PackageIcon>
		<ProjectGuid>{E851802A-C1F1-47BB-8725-1FD1868CC6EB}</ProjectGuid>
		<PublishSingleFile>true</PublishSingleFile>
		<SelfContained>True</SelfContained>

		<!--
		handlebars.net\2.1.4\lib\netstandard2.1\Handlebars.dll : warning IL2104: Assembly 'Handlebars' produced trim warnings.
		octokit\0.48.0\lib\netstandard2.0\Octokit.dll : warning IL2104: Assembly 'Octokit' produced trim warnings.
		-->
		<PublishTrimmed>false</PublishTrimmed>
	</PropertyGroup>

	<ItemGroup>
		<ProjectReference Include="..\GitHubReleaseNotes.Logic\GitHubReleaseNotes.Logic.csproj" />
	</ItemGroup>

	<ItemGroup>
		<None Include="../../icon.png" Pack="true" PackagePath="" />
	</ItemGroup>

	<Target Name="PublishAndZip" AfterTargets="Build">
		<Exec Command="dotnet publish --no-build --no-restore -r win-x64 --self-contained --configuration $(Configuration)" />
		<Zip SourceFile="$(OutputPath)\publish\$(AssemblyName).exe" ZipFileName="$(OutputPath)\publish\$(AssemblyName).zip" />
	</Target>

	<UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
		<ParameterGroup>
			<SourceFile ParameterType="System.String" Required="true" />
			<ZipFileName ParameterType="System.String" Required="true" />
		</ParameterGroup>

		<Task>
			<Reference Include="System.IO.Compression.FileSystem" />
			<Using Namespace="System.IO.Compression" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
      try
      {
        Log.LogMessage(string.Format("Zipping file {0} to {1}", SourceFile, ZipFileName));
		
		// Temporarily create a directory to hold the file to be zipped
        string tempFolder = Path.Combine(Path.GetDirectoryName(SourceFile), Path.GetFileNameWithoutExtension(SourceFile) + "_temp");
        Directory.CreateDirectory(tempFolder);

        // Copy the source file to the temp directory
        string tempFilePath = Path.Combine(tempFolder, Path.GetFileName(SourceFile));
        File.Copy(SourceFile, tempFilePath, true);

        // Create a zip archive that contains the file in the temp directory
        if (File.Exists(ZipFileName))
        {
            File.Delete(ZipFileName); // Ensure we are creating a new zip file
        }
        ZipFile.CreateFromDirectory(tempFolder, ZipFileName);

        // Clean up the temp directory
        Directory.Delete(tempFolder, true);
		
        return true;
      }
      catch(Exception ex)
      {
        Log.LogErrorFromException(ex);
        return false;
      }
    ]]>
			</Code>
		</Task>
	</UsingTask>

</Project>