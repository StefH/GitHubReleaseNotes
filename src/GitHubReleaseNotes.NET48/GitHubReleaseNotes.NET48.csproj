<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net48</TargetFramework>
		<ProjectGuid>{B6269AAC-170A-43D0-8B9B-579DED3D9A00}</ProjectGuid>
		<StartupObject>GitHubReleaseNotes.Program</StartupObject>
	</PropertyGroup>

	<ItemGroup>
	  <Compile Include="..\GitHubReleaseNotes\ConfigurationParser.cs" Link="ConfigurationParser.cs" />
	  <Compile Include="..\GitHubReleaseNotes\SimpleCommandLineParser.cs" Link="SimpleCommandLineParser.cs" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Costura.Fody" Version="5.7.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Fody" Version="6.8.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\GitHubReleaseNotes.Logic\GitHubReleaseNotes.Logic.csproj">
			<AdditionalProperties>TargetFramework=net48</AdditionalProperties>
		</ProjectReference>
	</ItemGroup>

	<Target Name="Zip" AfterTargets="Build">
		<Zip SourceFile="$(OutputPath)\$(AssemblyName).exe" ZipFileName="$(OutputPath)\$(AssemblyName).zip" />
	</Target>

	<UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
		<ParameterGroup>
			<SourceFile ParameterType="System.String" Required="true" />
			<ZipFileName ParameterType="System.String" Required="true" />
		</ParameterGroup>

		<Task>
			<Reference Include="System.IO.Compression.FileSystem" />
			<Using Namespace="System.IO.Compression" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
      try
      {
        Log.LogMessage(string.Format("Zipping file {0} to {1}", SourceFile, ZipFileName));
		
		// Temporarily create a directory to hold the file to be zipped
        string tempFolder = Path.Combine(Path.GetDirectoryName(SourceFile), Path.GetFileNameWithoutExtension(SourceFile) + "_temp");
        Directory.CreateDirectory(tempFolder);

        // Copy the source file to the temp directory
        string tempFilePath = Path.Combine(tempFolder, Path.GetFileName(SourceFile));
        File.Copy(SourceFile, tempFilePath, true);

        // Create a zip archive that contains the file in the temp directory
        if (File.Exists(ZipFileName))
        {
            File.Delete(ZipFileName); // Ensure we are creating a new zip file
        }
        ZipFile.CreateFromDirectory(tempFolder, ZipFileName);

        // Clean up the temp directory
        Directory.Delete(tempFolder, true);
		
        return true;
      }
      catch(Exception ex)
      {
        Log.LogErrorFromException(ex);
        return false;
      }
    ]]>
			</Code>
		</Task>
	</UsingTask>

</Project>